//@author: a0097784h



	/**
	 * origin: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\CommandFactory.java
	 */

public class CommandFactory {

	private static final String COMMA = ",";
	private static final String FILLER = "by ";

	// EDIT
	private static final String MESSAGE_INVALID_EDIT = "Usage: edit <index> <description> on <date> from <start time> to <end time>";
	private static final String MESSAGE_INVALID_NUMBERFORMAT = "Please key in an integer";
	private static final String MESSAGE_INVALID_NUMBERSIGN = "Please key in a positive number";
	private static final String MESSAGE_EMPTY = "file is empty";

	private static Integer NUMBER_TASK_INDEX = 0;
	private static Integer EDIT_OFFSET = 1;
	private static Integer OFFSET = 1;
	// Number of test cases entry to clear from undo stack
    private static Integer NUM_TEST = 6;
	

	String userInputDesc;
	String commandType;
	String[] inputArray;
	public static String FEEDBACK = "";

	// DELETE//
	private static final String MESSAGE_INVALID_DELETE = "Usage: delete <number>";
	private static final String MESSAGE_INVALID_NUMBER = "Please choose another value";

	private static Integer DELETE_PARA = 1;

	// UNDO / REDO//
	private static final String MESSAGE_UNDO_FAIL = "There is nothing to undo";
	private static final String MESSAGE_REDO_FAIL = "There is nothing to redo";

	public static CommandFactory INSTANCE = new CommandFactory();
	public final String UNDO_ADD = "add";
	public final String UNDO_EDIT = "edit";
	public final String UNDO_DONE = "done";
	public final String UNDO_DONEALL = "doneall";

	// DateTime printing
	private static final DateTimeFormatter dateDisplay = DateTimeFormat.forPattern("dd/MM/YY");
	private static final DateTimeFormatter timeDisplay = DateTimeFormat.forPattern("HH:mm");
	private static final DateTimeFormatter dateTimeDisplay = DateTimeFormat.forPattern("dd/MM/YY HH:mm");

	// private List<Task> tasks;
	private List<Task> tasks;
	private ObservableList<Task> display;
	private LinkedHashMap<Integer, Integer> tasksMap; // <displayId, realId>

	private StorageHelper storage;
	private UndoStorage undoStorage;
	private RedoStorage redoStorage;
	private Logger logger = PandaLogger.getLogger();

	private Stack<SimpleEntry<Integer, Command>> undoStack;
	private Stack<Command> redoStack;

	private CommandFactory() {
		this.tasks = new ArrayList<Task>();
		this.display = FXCollections.observableArrayList();
		this.undoStack = new Stack<SimpleEntry<Integer, Command>>();
		this.redoStack = new Stack<Command>();
		this.tasksMap = new LinkedHashMap<Integer, Integer>(); // <ID to
																// display, real
																// ID in tasks>
		this.storage = StorageHelper.INSTANCE;
		this.undoStorage = UndoStorage.INSTANCE;
		this.redoStorage = RedoStorage.INSTANCE;
		this.fetch();
	}

	/* populate tasks buffer and undo command stack */
	private void fetch() {
		this.tasks = this.storage.getAllTasks();
		this.display = FXCollections.observableArrayList(tasks);
		this.populateTasksMapWithDefaultCriteria();
		this.populateUndoStack();
		this.populateRedoStack();
	}

	/* initialize and populate undoStack */
	private void populateUndoStack() {
		this.undoStack = this.undoStorage.getAllCommands();
	}

	/* initialize and populate redoStack */
	private void populateRedoStack() {
		this.redoStack = this.redoStorage.getAllCommands();
	}

	/* by default, display tasks which are not marked as deleted */
	// End of segment: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\CommandFactory.java





	/**
	 * origin: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\CommandFactory.java
	 */

	private void doUndo() {
		logger.info("doUndo");
		if (!undoStack.isEmpty()) {
			SimpleEntry<Integer, Command> lastEntry = this.undoStack.pop();
			int taskid = lastEntry.getKey();
			Command lastCommand = lastEntry.getValue();
			logger.info("Last Command:" + lastCommand.toString());
			executeUndo(taskid, lastCommand);
			syncTasks();
		} else {
			showToUser(MESSAGE_UNDO_FAIL);
		}
	}

	private void executeUndo(int taskid, Command command) {
		assert (command.rawText == null);
		switch (command.command) {
		case ADD:
			doUndoAdd(taskid, command);
			break;
		case EDIT:
			doUndoEdit(taskid, command);
			break;
		case DELETE:
			doUndoDelete(taskid, command);
			break;
		case DONE:
			doUndoDone(taskid, command);
			break;
		case UNDONE:
			doUndoUndone(taskid, command);
			break;
		default:
			return;
		}
	}

	private void doRedo() {
		logger.info("doRedo");
		if (!redoStack.isEmpty()) {
			Command lastCommand = this.redoStack.pop();
			logger.info("Last Command:" + lastCommand.toString());
			executeRedo(lastCommand);
			syncTasks();
		} else {
			showToUser(MESSAGE_REDO_FAIL);
		}
	}

	private void executeRedo(Command command) {
		assert (command.rawText == null);
		switch (command.command) {
		case ADD:
			doRedoAdd(command);
			break;
		case EDIT:
			doRedoEdit(command);
			break;
		case DELETE:
			doRedoDelete(command);
			break;
		case DONE:
			doRedoDone(command);
			break;
		case UNDONE:
			doRedoUndone(command);
			break;
		default:
			return;
		}
	}

	private void doRedoDone(Command command) {
		doDone(command);
	}

	private void doRedoUndone(Command command) {
		doUndone(command);
	}

	private void doRedoDelete(Command command) {
		doDelete(command);
	}

	private void doRedoEdit(Command command) {
		doEdit(command);
	}

	private void doRedoAdd(Command command) {
		doAdd(command);
	}

	// End of segment: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\CommandFactory.java





	/**
	 * origin: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\CommandFactory.java
	 */

	private void doEdit(Command command) {
		String userInput = command.rawText;
		assert (userInput != null);
		this.logger.info("doEdit:" + userInput);
		if (checkEditIndexInput(userInput)) {
			int taskInt = (Integer.parseInt(getFirstWord(userInput)) - EDIT_OFFSET);
			Task editTask = new Task(obtainUserEditInput(userInput));
			this.undoStack.push(new SimpleEntry<Integer, Command>(tasksMap
					.get(taskInt), convertModifiedTaskToCommand(
					command.command, tasksMap.get(taskInt))));
			this.tasks.set(tasksMap.get(taskInt), editTask);

			syncTasks();
		}
	}

	private void doUndoEdit(int taskid, Command command) {
		Task oldTask = new Task(command.rawText);
		int displayID = this.getDisplayId(taskid);
		this.redoStack.push(convertEditedTaskToCommand(displayID));
		this.tasks.set(taskid, oldTask);
		syncTasks();
	}

	/*
	 * Method to convert tasks that are edited into command for redo edit
	 * operation
	 */
	private Command convertEditedTaskToCommand(int taskid) {
		Task editedTask = tasks.get(tasksMap.get(taskid - OFFSET));
		ArrayList<String> tags = editedTask.getTaskTags();
		StringBuilder sb = new StringBuilder();
		sb.append(COMMAND_TYPE.EDIT.name().toLowerCase() + " " + taskid + " "
				+ editedTask.getTaskDescription());
		if (editedTask.getTaskStartTime() == null
				&& editedTask.getTaskEndTime() != null) {
			sb.append(" on " + dateDisplay.print(editedTask.getTaskEndTime())
					+ " by " + timeDisplay.print(editedTask.getTaskEndTime()));
		} else if (editedTask.getTaskStartTime() != null
				&& editedTask.getTaskEndTime() != null) {
			sb.append(" from "
					+ dateTimeDisplay.print(editedTask.getTaskStartTime()));
			sb.append(" to "
					+ dateTimeDisplay.print(editedTask.getTaskEndTime()));
		}
		if (tags.size() != 0) {
			for (int i = 0; i < tags.size(); i++) {
				sb.append(" " + tags.get(i));
			}
		}
		String rawText = sb.toString();
		Command oldCommand = new Command(rawText);
		return oldCommand;
	}

	/*
	 * Method to convert tasks that are added or edited previously into command
	 * for undo operation
	 */
	private Command convertModifiedTaskToCommand(Command.COMMAND_TYPE Command,
			int taskid) {
		Task oldTask = tasks.get(taskid);
		ArrayList<String> tags = oldTask.getTaskTags();
		StringBuilder sb = new StringBuilder();
		if (Command == COMMAND_TYPE.ADD) {
			sb.append(COMMAND_TYPE.ADD.name().toLowerCase() + " "
					+ oldTask.getTaskDescription());
		} else {
			sb.append(COMMAND_TYPE.EDIT.name().toLowerCase() + " "
					+ oldTask.getTaskDescription());
		}
		if (oldTask.getTaskStartTime() == null
				&& oldTask.getTaskEndTime() != null) {
			sb.append(" on " + dateDisplay.print(oldTask.getTaskEndTime())
					+ " by " + timeDisplay.print(oldTask.getTaskEndTime()));
		} else if (oldTask.getTaskStartTime() != null
				&& oldTask.getTaskEndTime() != null) {
			sb.append(" from "
					+ dateTimeDisplay.print(oldTask.getTaskStartTime()));
			sb.append(" to " + dateTimeDisplay.print(oldTask.getTaskEndTime()));
		}
		if (tags.size() != 0) {
			for (int i = 0; i < tags.size(); i++) {
				sb.append(" " + tags.get(i));
			}
		}
		String rawText = sb.toString();
		Command oldCommand = new Command(rawText);
		return oldCommand;
	}

	// End of segment: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\CommandFactory.java





	/**
	 * origin: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\CommandFactory.java
	 */

   /* Method to update task map with the original order of the deleted/done task */
	private void updateHashMapAfterUndoDelete(int realId, int prevId) {
		LinkedHashMap<Integer, Integer> beforeID = new LinkedHashMap<Integer, Integer>();
		LinkedHashMap<Integer, Integer> afterID = new LinkedHashMap<Integer, Integer>();

		if (prevId == -1) {
			for (int i = 0; i < tasksMap.size(); i++) {
				afterID.put(i, tasksMap.get(i));
			}
			int sizeAfterAdding = tasksMap.size() + 1;
			int indexOfAfterId = 0;
			tasksMap.clear();
			tasksMap.put(0, realId);
			for (int i = 1; i < sizeAfterAdding; i++) {
				tasksMap.put(i, afterID.get(indexOfAfterId));
				indexOfAfterId++;
			}
		} else {
			for (int i = 0; i <= prevId; i++) {
				beforeID.put(i, tasksMap.get(i));
			}
			int afterIndex = prevId + 1;
			int index = 0;
			int sizeAfterAdding = tasksMap.size() + 1;
			for (int k = afterIndex; k < tasksMap.size(); k++) {
				afterID.put(index, tasksMap.get(k));
				index++;
			}
			tasksMap.clear();
			int afterAddingIndex = 0;
			for (int l = 0; l < beforeID.size(); l++) {
				tasksMap.put(l, beforeID.get(l));
			}
			tasksMap.put(afterIndex, realId);
			for (int k = afterIndex + 1; k < sizeAfterAdding; k++) {
				tasksMap.put(k, afterID.get(afterAddingIndex));
				afterAddingIndex++;
			}
		}
	}

	private void doUndoDelete(int taskid, Command command) {
		Task t = tasks.get(taskid);
		t.setMarkAsUndelete();
		int prevID = Integer.parseInt(command.rawText);
		updateHashMapAfterUndoDelete(taskid, prevID);
		int displayID = this.getDisplayId(taskid);
		this.redoStack.push(convertTaskToCommand(command.command, displayID));
		syncTasks();
	}

	private int getDisplayId(int realID) {
		int displayID = 0;
		for (int i = 0; i < tasksMap.size(); i++) {
			if (tasksMap.get(i) == realID) {
				displayID = i + OFFSET;
				break;
			}
		}
		return displayID;
	}

	/* Method to get command for Undo Done/Delete operations */
	private Command commandWithPreviousIndex(Command.COMMAND_TYPE Command,
			int displayId) {
		StringBuilder sb = new StringBuilder();
		int prevIndex;
		if (displayId != 0) {
			prevIndex = displayId - 1;
		} else {
			prevIndex = -1;
		}
		if (Command == COMMAND_TYPE.DONE) {
			sb.append("done " + prevIndex);
		} else {
			sb.append("delete " + prevIndex);
		}
		Command newCommand = new Command(sb.toString());
		return newCommand;
	}

	/* Method to get command for Redo Delete/Done/Undone operations */
	private Command convertTaskToCommand(Command.COMMAND_TYPE Command,
			int taskid) {
		StringBuilder sb = new StringBuilder();
		if (Command == COMMAND_TYPE.DONE) {
			sb.append(COMMAND_TYPE.DONE.name().toLowerCase() + " " + taskid);
		} else if (Command == COMMAND_TYPE.UNDONE) {
			sb.append(COMMAND_TYPE.UNDONE.name().toLowerCase() + " " + taskid);
		} else {
			sb.append(COMMAND_TYPE.DELETE.name().toLowerCase() + " " + taskid);
		}
		String rawText = sb.toString();
		this.logger.info("string is :" + rawText);
		Command redoCommand = new Command(rawText);
		return redoCommand;
	}

	private void doDone(Command command) {
		String rawText = command.rawText;
		assert (rawText != null);
		if (checkDeleteInput(rawText)) {
			int displayId = Integer.parseInt(rawText) - OFFSET;
			int realId = tasksMap.get(displayId);

			Task task = tasks.get(realId);
			task.setTaskDone();
			updateHashMapAfterDelete(displayId);

			Command doneCommand = commandWithPreviousIndex(command.command, displayId);
			this.undoStack.push(new SimpleEntry<Integer, Command>(realId, doneCommand));
			syncTasks();
		}
	}

	private void doUndoDone(int taskid, Command command) {
		logger.info("doUndoDone");
		Task t = tasks.get(taskid);
		t.setTaskUndone();
		int prevID = Integer.parseInt(command.rawText);
		updateHashMapAfterUndoDelete(taskid, prevID);
		int displayID = this.getDisplayId(taskid);
		this.redoStack.push(convertTaskToCommand(command.command, displayID));
		syncTasks();
	}

	private void doUndone(Command command) {
		String rawText = command.rawText;
		assert (rawText != null);
		if (checkDeleteInput(rawText)) {
			int displayId = Integer.parseInt(rawText) - OFFSET;
			int realId = tasksMap.get(displayId);
			Task task = tasks.get(realId);
			task.setTaskUndone();
			;
			updateHashMapAfterDelete(displayId);

			Command undoneCommand = commandWithPreviousIndex(command.command,
					displayId);
			this.undoStack.push(new SimpleEntry<Integer, Command>(realId,
					undoneCommand));
			syncTasks();
		}
	}

	private void doUndoUndone(int taskid, Command command) {
		logger.info("doUndoUndone");
		Task t = tasks.get(taskid);
		t.setTaskDone();
		int prevID = Integer.parseInt(command.rawText);
		updateHashMapAfterUndoDelete(taskid, prevID);
		int displayID = this.getDisplayId(taskid);
		this.redoStack.push(convertTaskToCommand(command.command, displayID));
		syncTasks();
	}

	// Method to check delete parameter
	private boolean checkDeleteInput(String inputNumber) {
		// No argument input
		if (!isValidString(inputNumber)) {
			showToUser(MESSAGE_INVALID_DELETE);
			FEEDBACK = MESSAGE_INVALID_DELETE;
			return false;
		}
		/*
		 * Checks if argument fulfill the delete parameters, is a positive non
		 * zero integer and whether the number specified is within the array
		 * size
		 */
		String[] stringArray = inputNumber.split(" ");
		if (stringArray.length != DELETE_PARA) {
			showToUser(MESSAGE_INVALID_DELETE);
			FEEDBACK = MESSAGE_INVALID_DELETE;
			return false;
		} else if (!isPositiveNonZeroInt(inputNumber)) {
			return false;
		} else if (!checkIfNumberBelowArraySize(inputNumber)) {
			return false;
		}
		return true;
	}

	private boolean checkEditIndexInput(String inputNumber) {
		this.logger.info("checkEditIndexInput:" + inputNumber);
		String[] stringArray = inputNumber.split(" ");
		String taskIndex = stringArray[NUMBER_TASK_INDEX];
		// No argument input
		if (!isValidString(inputNumber)) {
			showToUser("here valid string");
			showToUser(MESSAGE_INVALID_EDIT);
			FEEDBACK = MESSAGE_INVALID_EDIT;
			return false;
		}
		/*
		 * Checks if argument fulfill the delete parameters, is a positive non
		 * zero integer and whether the number specified is within the array
		 * size
		 */
		else if (!isPositiveNonZeroInt(taskIndex)) {
			return false;
		} else if (!checkIfNumberBelowArraySize(taskIndex)) {
			return false;
		}
		return true;
	}

	private boolean checkIfNumberBelowArraySize(String n) {
		if (checkIfFileIsEmpty()) {
			showToUser(MESSAGE_EMPTY);
			FEEDBACK = MESSAGE_EMPTY;
			return false;
		}
		try {
			int num = Integer.parseInt(n) - 1;
			if (num >= tasks.size()) {
				showToUser(MESSAGE_INVALID_NUMBER);
				FEEDBACK = MESSAGE_INVALID_NUMBER;
				return false;
			}
			return true;
		} catch (NumberFormatException nfe) {
			showToUser(MESSAGE_INVALID_NUMBERFORMAT);
			FEEDBACK = MESSAGE_INVALID_NUMBERFORMAT;
			return false;
		}
	}

	// Method to check for number >0
	private boolean isPositiveNonZeroInt(String indexNumber) {
		try {
			int i = Integer.parseInt(indexNumber);
			if (i > 0) {
				return true;
			} else {
				showToUser(MESSAGE_INVALID_NUMBERSIGN);
				FEEDBACK = MESSAGE_INVALID_NUMBERSIGN;
				return false;
			}
		} catch (NumberFormatException nfe) {
			showToUser(MESSAGE_INVALID_NUMBERFORMAT);
			FEEDBACK = MESSAGE_INVALID_NUMBERFORMAT;
			return false;
		}
	}

	/* Method to remove task index from user command and return edit input */
	private String obtainUserEditInput(String userCommand) {
		StringBuilder sb = new StringBuilder();
		String[] stringArray = userCommand.split(" ");
		for (int i = 1; i < (stringArray.length); i++) {
			sb.append(stringArray[i]);
			sb.append(" ");
		}
		showToUser(sb.toString());
		this.logger.info("obtainUserEditInput:" + sb.toString());
		return sb.toString();
	}

	private static String getFirstWord(String userCommand) {
		String commandTypeString = userCommand.trim().split("\\s+")[0];
		return commandTypeString;
	}

	/* Method checks if inputString is a valid String */
	private boolean isValidString(String inputString) {
		if (inputString.trim().length() == 0) {
			return false;
		}
		return true;
	}

	/* Method checks if data list is empty */
	private boolean checkIfFileIsEmpty() {
		if (tasks.isEmpty()) {
			return true;
		}
		return false;
	}

	private void showToUser(String outputString) {
		System.out.println(outputString);
	}

	// End of segment: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\CommandFactory.java





	/**
	 * origin: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\CommandFactory.java
	 */

	public int testGetDisplayId(int realId) {
		return getDisplayId(realId);
	}

	public void clearUndoRedoAfterTesting() {
		for (int i = 0; i < NUM_TEST; i++) {
			this.undoStack.pop();
		}
		this.syncTasks();
	}

	public int getLastIndex() {
		return (tasks.size() - 1);
	}

	public void testAdd(Command command) {
		this.executeCommand(command);
	}

	public void testEdit(Command command) {
		this.executeCommand(command);
	}

	public void testUndo() {
		doUndo();
	}

	public void testRedo() {
		doRedo();
	}

	public void testDelete(Command command) {
		this.executeCommand(command);
	}

	public void testDone(Command command) {
		this.executeCommand(command);
	}

}

	// End of segment: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\CommandFactory.java





	/**
	 * origin: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\Criteria.java
	 */

/* 
 * Criteria to help with the filtering of tasks. Used in listing and searching
 */
public class Criteria {
	

	public static ArrayList<Task> getAllOverdueTasks(List<Task> tasks) {
		ArrayList<Task> result = new ArrayList<Task>();
		for(Task t: tasks) {
			if(t.getMarkAsDelete() == false && t.getTaskDone() == false && t.getTaskEndTime() != null && 
			   t.getTaskEndTime().isBeforeNow())
				result.add(t);
		}
		return result;
	}
	
	public static ArrayList<Integer> getAllOverdueTaskIDs(List<Task> tasks) {
		ArrayList<Integer> result = new ArrayList<Integer>();
		for(Task t: tasks) {
			if(t.getMarkAsDelete() == false && t.getTaskDone() == false && t.getTaskEndTime() != null && 
			   t.getTaskEndTime().isBeforeNow())
				result.add(tasks.indexOf(t));
		}
		return result;
	}
	
	public static ArrayList<Integer> getAllDoneTasks(List<Task> tasks) {
		ArrayList<Integer> result = new ArrayList<Integer>();
		for(Task t: tasks) {
			if(t.getMarkAsDelete() == false && t.getTaskDone() == true) {
				result.add(tasks.indexOf(t));
			}
		}
		return result;
	}

	// End of segment: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\Criteria.java





	/**
	 * origin: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\Criteria.java
	 */

	public static ArrayList<Integer> getAllTasksforNextWeek(List <Task> tasks) {
		ArrayList<Integer> result = new ArrayList<Integer>();
		DateTime today = new DateTime();
		Interval interval = new Interval(today.plusWeeks(1), today.plusWeeks(2));
		for(Task t: tasks) {
			if(t.getMarkAsDelete() == false && t.getTaskDone() == false) {
				// deadline tasks - check with end timestamp
				if(t.getTaskStartTime() == null && t.getTaskEndTime() != null) {
					if(interval.contains(t.getTaskEndTime())) {
						result.add(tasks.indexOf(t));
					}
				// timed tasks - check with start timestamp
				} else if(t.getTaskStartTime() != null && t.getTaskEndTime() != null) {
					if(interval.contains(t.getTaskStartTime()))
						result.add(tasks.indexOf(t));
				}
			}
		}
		return result;
	}
	
	public static ArrayList<Integer> getAllUndeletedTasksWithHashTag(List<Task> tasks, String rawText) {
		ArrayList<Integer> result = new ArrayList<Integer>();
		for(Task t: tasks) {
			if(t.getTaskTags().contains(rawText) && t.getTaskDone() == false && t.getMarkAsDelete() == false) {
				result.add(tasks.indexOf(t));
			}
		}
		return result;
	}
	
	// End of segment: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\logic\Criteria.java





	/**
	 * origin: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\storage\RedoStorage.java
	 */

/* A singleton class to handle the persistence of Command objects
 * to support Redo feature
 */
public class RedoStorage {

	public static RedoStorage INSTANCE = new RedoStorage();
	public static final String FILENAME = "redoData.json";

	private static final String ERROR_FILE_CREATION = "Error in file creation of " + FILENAME;
	private static final String ERROR_COMMAND_WRITE = "Error in writing commands to " + FILENAME;
	private static final String ERROR_FILE_IO = "Error in File IO";

	private Gson gson;
	private File file;

	private RedoStorage() {
		this.file = createOrGetFile(FILENAME);
		this.gson = new GsonBuilder()
				.enableComplexMapKeySerialization().create();
	}
	
	public void writeCommands(Stack<Command> c) {
		PandaLogger.getLogger().info("writeCommands");
		PandaLogger.getLogger().info("Total Commands to DB:" + c.size());
		try(Writer writer = new OutputStreamWriter(new FileOutputStream(
				this.file), "UTF-8")) {
			gson.toJson(c, writer);
		} catch(IOException e) {
			throw new Error(ERROR_COMMAND_WRITE);
		}
	}
	
	public void writeCommands(Stack<Command> c, File f) {
		try(Writer writer = new OutputStreamWriter(new FileOutputStream(
				f), "UTF-8")) {
			gson.toJson(c, writer);
		} catch(IOException e) {
			throw new Error(ERROR_COMMAND_WRITE);
		}
	}

	public Stack<Command> getAllCommands() {
		PandaLogger.getLogger().info("getAllCommands");
		Stack<Command> commands = null;
		try {
			BufferedReader br = new BufferedReader(new FileReader(this.file));
			commands = this.gson.fromJson(br,  new TypeToken<Stack< Command>>() {
			}.getType());
			if(commands == null) {
				return new Stack<Command>();
			}
			PandaLogger.getLogger().info("Total Commands From DB:" + commands.size());
		} catch(Exception e) {
			throw new Error(ERROR_FILE_IO);
		}
		return commands;
	}
	
	public Stack<Command> getAllCommands(File file) {
		PandaLogger.getLogger().info("getAllCommands");
		Stack<Command> commands = null;
		try {
			BufferedReader br = new BufferedReader(new FileReader(file));
			commands = this.gson.fromJson(br,  new TypeToken<Stack<Command>>() {
			}.getType());
			if(commands == null) {
				return new Stack<Command>();
			}
			PandaLogger.getLogger().info("Total Commands From DB:" + commands.size());
		} catch(Exception e) {
			e.printStackTrace();
			throw new Error(ERROR_FILE_IO);
		}
		return commands;
	}
	
	private File createOrGetFile(String filename) {
		file = new File(filename);
		if (!file.isFile()) {
			try {
				file.createNewFile();
			} catch (IOException e) {
				throw new Error(ERROR_FILE_CREATION);
			}
		}
		return file;
	}

	public void clearFile() {
		file.delete();
		this.file = createOrGetFile(FILENAME);
	}
}
	// End of segment: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\storage\RedoStorage.java





	/**
	 * origin: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\storage\UndoStorage.java
	 */

/* A singleton class to handle the persistence of Command objects
 * to support Undo/Redo feature
 */
public class UndoStorage {

	public static UndoStorage INSTANCE = new UndoStorage();
	public static final String FILENAME = "undoData.json";

	private static final String ERROR_FILE_CREATION = "Error in file creation of " + FILENAME;
	private static final String ERROR_COMMAND_WRITE = "Error in writing commands to " + FILENAME;
	private static final String ERROR_FILE_IO = "Error in File IO";

	private Gson gson;
	private File file;

	private UndoStorage() {
		this.file = createOrGetFile(FILENAME);
		this.gson = new GsonBuilder()
				.enableComplexMapKeySerialization().create();
	}
	
	public void writeCommands(Stack<SimpleEntry<Integer, Command>> c) {
		PandaLogger.getLogger().info("writeCommands");
		PandaLogger.getLogger().info("Total Commands to DB:" + c.size());
		try(Writer writer = new OutputStreamWriter(new FileOutputStream(
				this.file), "UTF-8")) {
			gson.toJson(c, writer);
		} catch(IOException e) {
			throw new Error(ERROR_COMMAND_WRITE);
		}
	}
	
	public void writeCommands(Stack<SimpleEntry<Integer, Command>> c, File f) {
		try(Writer writer = new OutputStreamWriter(new FileOutputStream(f), "UTF-8")) {
			gson.toJson(c, writer);
		} catch(IOException e) {
			throw new Error(ERROR_COMMAND_WRITE);
		}
	}

	public Stack<SimpleEntry<Integer, Command>> getAllCommands() {
		PandaLogger.getLogger().info("getAllCommands");
		Stack<SimpleEntry<Integer, Command>> commands = null;
		try {
			BufferedReader br = new BufferedReader(new FileReader(this.file));
			commands = this.gson.fromJson(br,  new TypeToken<Stack<SimpleEntry<Integer, Command>>>() {
			}.getType());
			if(commands == null) {
				return new Stack<SimpleEntry<Integer, Command>>();
			}
			PandaLogger.getLogger().info("Total Commands From DB:" + commands.size());
		} catch(Exception e) {
			throw new Error(ERROR_FILE_IO);
		}
		return commands;
	}
	
	public Stack<SimpleEntry<Integer, Command>> getAllCommands(File file) {
		PandaLogger.getLogger().info("getAllCommands");
		Stack<SimpleEntry<Integer, Command>> commands = null;
		try {
			BufferedReader br = new BufferedReader(new FileReader(file));
			commands = this.gson.fromJson(br,  new TypeToken<Stack<SimpleEntry<Integer, Command>>>() {
			}.getType());
			if(commands == null) {
				return new Stack<SimpleEntry<Integer, Command>>();
			}
			PandaLogger.getLogger().info("Total Commands From DB:" + commands.size());
		} catch(Exception e) {
			e.printStackTrace();
			throw new Error(ERROR_FILE_IO);
		}
		return commands;
	}
	
	private File createOrGetFile(String filename) {
		file = new File(filename);
		if (!file.isFile()) {
			try {
				file.createNewFile();
			} catch (IOException e) {
				throw new Error(ERROR_FILE_CREATION);
			}
		}
		return file;
	}

	public void clearFile() {
		file.delete();
		this.file = createOrGetFile(FILENAME);
	}
}
	// End of segment: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\storage\UndoStorage.java





	/**
	 * origin: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\test\CommandFactoryTest.java
	 */

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class CommandFactoryTest {

	private CommandFactory cf = CommandFactory.INSTANCE;
	private static final DateTimeFormatter dateTimeDisplay = DateTimeFormat.forPattern("dd/MM/YY HH:mm");
	private LinkedHashMap<Integer, Integer> map;

	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		
	}

	@Before
	public void setUp() throws Exception {
		map = new LinkedHashMap<Integer, Integer>();
		map.put(0, 0);
		map.put(1, 1);
		map.put(2, 2);
		map.put(3, 3);
		map.put(4, 4);
		map.put(5, 5);
		map.put(6, 6);
	}

	@After
	public void tearDown() throws Exception {
		map.clear();
	}

	@Test
	public void testHashMapUpdate() {
		map = new LinkedHashMap<Integer, Integer>();
		map.put(0, 0);
		map.put(1, 1);
		map.put(2, 2);
		map.put(3, 3);
		map.put(4, 4);
		map.put(5, 5);
		map.put(6, 6);
		map = updateHashMapAfterDelete(map, 3);
		assertEquals("{0=0, 1=1, 2=2, 3=4, 4=5, 5=6}", map.toString());
		map = updateHashMapAfterDelete(map, 2);
		assertEquals("{0=0, 1=1, 2=4, 3=5, 4=6}", map.toString());
	}

	@Test
	/*Method to test the adding of tasks including undo/redo operation of add*/
	public void test1Add() {
		Command testCommand = new Command("add testing task on 14/06/14 from 2pm to 3pm");
		cf.testAdd(testCommand);
		List<Task> testList = cf.getTasks();
		assertEquals("testing task", testList.get(testList.size() - 1).getTaskDescription());
		assertEquals("14/06/14 14:00", dateTimeDisplay.print(testList.get(testList.size() - 1).getTaskStartTime()));
		assertEquals("14/06/14 15:00", dateTimeDisplay.print(testList.get(testList.size() - 1).getTaskEndTime()));
	}

	@Test
	/*Method to test the editing of tasks including undo/redo operation of edit*/
	public void test2Edit() {
		int lastIndex = cf.getLastIndex();
		int displayID = cf.testGetDisplayId(lastIndex);
		String edit = ("edit " + displayID + " edited task on 12/06/14 from 1pm to 5pm");
		Command testEditCommand = new Command(edit);
		cf.testEdit(testEditCommand);
		List<Task> testList = cf.getTasks();
		assertEquals("edited task", testList.get(testList.size() - 1).getTaskDescription());
		assertEquals("12/06/14 13:00", dateTimeDisplay.print(testList.get(testList.size() - 1).getTaskStartTime()));
		assertEquals("12/06/14 17:00", dateTimeDisplay.print(testList.get(testList.size() - 1).getTaskEndTime()));

		//editing task from timed to deadline
		String editTimeToDeadline = ("edit " + displayID + " deadline task on 12/06/14 by 9pm");
		Command testEditTimedToDeadlineCommand = new Command(editTimeToDeadline);
		cf.testEdit(testEditTimedToDeadlineCommand);
		List<Task> testETD = cf.getTasks();
		assertEquals("deadline task", testETD.get(testETD.size() - 1).getTaskDescription());
		assertEquals(dateTimeDisplay.print(DateTime.now()), dateTimeDisplay.print(testETD.get(testETD.size() - 1).getTaskStartTime()));
		assertEquals("12/06/14 21:00", dateTimeDisplay.print(testETD.get(testETD.size() - 1).getTaskEndTime()));

		//editing task from deadline to floating
		String editDeadlineToFloating = ("edit " + displayID + " Non-timed");
		Command testDeadlineToFloatingCommand = new Command(editDeadlineToFloating);
		cf.testEdit(testDeadlineToFloatingCommand);
		List<Task> testDTF = cf.getTasks();
		assertEquals("Non-timed", testDTF.get(testDTF.size() - 1).getTaskDescription());
		assertEquals(dateTimeDisplay.print(DateTime.now()), dateTimeDisplay.print(testDTF.get(testDTF.size() - 1).getTaskStartTime()));
		assertEquals(dateTimeDisplay.print(DateTime.now()), dateTimeDisplay.print(testDTF.get(testDTF.size() - 1).getTaskEndTime()));
		
		//editing task from floating to timed
		String editFloatingToTimed = ("edit " + displayID + " timed task on 12/06/14 from 2pm to 5pm");
		Command testFloatingToTimedCommand = new Command(editFloatingToTimed);
		cf.testEdit(testFloatingToTimedCommand);
		List<Task> testFTT = cf.getTasks();
		assertEquals("timed task", testDTF.get(testFTT.size() - 1).getTaskDescription());
		assertEquals("12/06/14 14:00", dateTimeDisplay.print(testFTT.get(testFTT.size() - 1).getTaskStartTime()));
		assertEquals("12/06/14 17:00", dateTimeDisplay.print(testFTT.get(testFTT.size() - 1).getTaskEndTime()));

		// Testing undo edit
		cf.testUndo();
		List<Task> undoList = cf.getTasks();
		assertEquals("Non-timed", undoList.get(undoList.size() - 1).getTaskDescription());
		assertEquals(dateTimeDisplay.print(DateTime.now()), dateTimeDisplay.print(undoList.get(undoList.size() - 1).getTaskStartTime()));
		assertEquals(dateTimeDisplay.print(DateTime.now()), dateTimeDisplay.print(undoList.get(undoList.size() - 1).getTaskEndTime()));

		// Testing redo edit
		cf.testRedo();
		List<Task> redoList = cf.getTasks();
		assertEquals("timed task", testList.get(redoList.size() - 1).getTaskDescription());
		assertEquals("12/06/14 14:00", dateTimeDisplay.print(redoList.get(redoList.size() - 1).getTaskStartTime()));
		assertEquals("12/06/14 17:00", dateTimeDisplay.print(redoList.get(redoList.size() - 1).getTaskEndTime()));
	}
	
	@Test
	/*Method to test the marking of task as done including undo/redo operation of done*/
	public void test3Done() {
		int lastIndex = cf.getLastIndex();
		System.out.println("done test last index:" + lastIndex);
		int displayID = cf.testGetDisplayId(lastIndex);
		String done = ("done " + displayID);
	    Command testDoneCommand = new Command(done);
	    cf.testDone(testDoneCommand);
	    List<Task> testList = cf.getTasks();
	    assertEquals(true, testList.get(lastIndex).getTaskDone());

	    // Testing of undo done
	    cf.testUndo();
	    List<Task> undoList = cf.getTasks();
	    assertEquals(false, undoList.get(lastIndex).getTaskDone());

	    // Test redo done
	    cf.testRedo();
	    List<Task> redoList = cf.getTasks();
	    assertEquals(true, redoList.get(lastIndex).getTaskDone());

	    // Test undone
	    redoList.get(lastIndex).setTaskUndone();
	    assertEquals(false, redoList.get(lastIndex).getTaskDone());
	   // Restore stack back to original order
	    cf.testUndo();
	}

	@Test
	/*Method to test the deletion of task including undo/redo operation of delete*/
	public void test4Delete() {
		int lastIndex = cf.getLastIndex();
		int displayID = cf.testGetDisplayId(lastIndex);
	    String delete = ("delete " + displayID);
		Command testDeleteCommand = new Command(delete);
		cf.testDelete(testDeleteCommand);
		List<Task> testList = cf.getTasks();
		assertEquals(true, testList.get(lastIndex).getMarkAsDelete());

		// Testing of undo delete
		cf.testUndo();
		List<Task> undoList = cf.getTasks();
		assertEquals(false, undoList.get(lastIndex).getMarkAsDelete());

		// Test redo
		cf.testRedo();
	    List<Task> redoList = cf.getTasks();
		assertEquals(true, redoList.get(lastIndex).getMarkAsDelete());
		cf.clearUndoRedoAfterTesting();	
	}

	private LinkedHashMap<Integer, Integer> updateHashMapAfterDelete(
		LinkedHashMap<Integer, Integer> tasksMap, int fakeid) {
		LinkedHashMap<Integer, Integer> temp = new LinkedHashMap<Integer, Integer>();
		for (int i = 0; i < tasksMap.size(); i++) {
			if (i < fakeid) {
				temp.put(i, tasksMap.get(i));
			} else {
				temp.put(i, tasksMap.get(i + 1));
			}
		}
		temp.remove(tasksMap.size() - 1);
		return temp;
	}
}

	// End of segment: C:\Users\Clement\Desktop\finaltest\cs2103jan2014-w15-1j\src\test\CommandFactoryTest.java





